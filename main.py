# This is a sample Python script.

# Press Ctrl+F5 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.

import os
import json
import random
import asyncio
import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, LabeledPrice
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
from database import init_db, get_db, User
from utils import get_random_prediction, can_get_prediction

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
with open('static/predictions.json', 'r', encoding='utf-8') as f:
    PREDICTIONS = json.load(f)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def load_stats():
    try:
        with open('stats.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_stats(stats):
    with open('stats.json', 'w', encoding='utf-8') as f:
        json.dump(stats, f, ensure_ascii=False, indent=2)

def payment_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–û–ø–ª–∞—Ç–∏—Ç—å 100 ‚≠êÔ∏è", pay=True)
    return builder.as_markup()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
def get_random_prediction():
    return random.choice(PREDICTIONS)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", web_app=WebAppInfo(url="https://levillaq.github.io/prediction.github.io/"))],
        [InlineKeyboardButton(text="üìä –†–µ–π—Ç–∏–Ω–≥", callback_data="show_rating")]
    ])
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ!",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "show_rating")
async def show_rating(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    stats = load_stats()
    if not stats:
        await callback.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞")
        return

    sorted_users = sorted(stats.items(), key=lambda x: x[1]['count'], reverse=True)
    rating_text = "üìä –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for i, (username, data) in enumerate(sorted_users[:10], 1):
        rating_text += f"{i}. @{username}: {data['count']} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π\n"
    
    await callback.message.answer(rating_text)
    await callback.answer()

@dp.message(lambda message: message.web_app_data is not None)
async def web_app_data(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        data = message.web_app_data.data
        if isinstance(data, str):
            data = json.loads(data)
        if data.get('action') == 'get_prediction':
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
            await message.answer(
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
                reply_markup=payment_keyboard()
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    await pre_checkout_query.answer(ok=True)

@dp.message(lambda message: message.successful_payment is not None)
async def successful_payment(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Flask API
        user_id = str(message.from_user.id)
        stars = message.successful_payment.total_amount  # –û–±—ã—á–Ω–æ –≤ XTR, –µ—Å–ª–∏ 100 XTR = 100
        try:
            requests.post('http://localhost:8000/api/add_stars', json={
                'user_id': user_id,
                'stars': stars
            })
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ API: {e}")
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = random.choice(PREDICTIONS)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = load_stats()
        user = message.from_user.username or str(message.from_user.id)
        if user not in stats:
            stats[user] = {'count': 0}
        stats[user]['count'] += 1
        save_stats(stats)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        await message.answer(
            f"‚ú® –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:\n\n{prediction}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ' –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è!"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@dp.message(Command("paysupport"))
async def pay_support(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /paysupport"""
    await message.answer(
        "–î–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–µ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞—é—Ç –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤, "
        "–æ–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ –≤—ã –æ—á–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ - —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏."
    )

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())

# See PyCharm help at https://www.jetbrains.com/help/pycharm/
